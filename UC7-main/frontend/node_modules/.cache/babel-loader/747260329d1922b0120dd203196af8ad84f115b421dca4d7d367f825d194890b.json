{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Danrley\\\\Documents\\\\ViniVeta\\\\UC7-main\\\\frontend\\\\src\\\\Contexts\\\\authContexts.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from 'react';\nimport apiLocal from '../services/api';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AutenticadoContexto = /*#__PURE__*/createContext();\nexport default function AuthProvider({\n  children\n}) {\n  _s();\n  // Inicializa o estado com os valores do localStorage (se existirem)\n  const [tokenT, setTokenT] = useState(() => localStorage.getItem('@token') ? true : false);\n  const [token, setToken] = useState(() => localStorage.getItem('@token') ? JSON.parse(localStorage.getItem('@token')) : '');\n  const [usuarioId, setUsuarioId] = useState(() => localStorage.getItem('@id') ? JSON.parse(localStorage.getItem('@id')) : null);\n  const [listaId, setListaId] = useState(() => localStorage.getItem('@listaId') ? JSON.parse(localStorage.getItem('@listaId')) : null);\n\n  // Efeito para persistir o estado no localStorage\n  useEffect(() => {\n    if (token) {\n      localStorage.setItem('@token', JSON.stringify(token));\n    } else {\n      localStorage.removeItem('@token');\n    }\n    if (usuarioId) {\n      localStorage.setItem('@id', JSON.stringify(usuarioId));\n    } else {\n      localStorage.removeItem('@id');\n    }\n    if (listaId) {\n      localStorage.setItem('@listaId', JSON.stringify(listaId));\n    } else {\n      localStorage.removeItem('@listaId');\n    }\n  }, [token, usuarioId, listaId]);\n  const autenticado = !!tokenT;\n  async function verificarToken() {\n    const iToken = localStorage.getItem('@token');\n    if (!iToken) {\n      setTokenT(false);\n      return;\n    }\n    const tokenU = JSON.parse(iToken);\n    setToken(tokenU);\n    try {\n      const resposta = await apiLocal.get('/VerificaToken', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (resposta.data.id) {\n        const listaIdLocal = localStorage.getItem('@listaId');\n        if (listaIdLocal) {\n          setListaId(JSON.parse(listaIdLocal));\n        }\n        setTokenT(true);\n        setUsuarioId(resposta.data.id);\n        localStorage.setItem('@id', JSON.stringify(resposta.data.id));\n        localStorage.setItem('@nome', JSON.stringify(resposta.data.nome));\n      }\n    } catch (err) {\n      console.error(\"Erro ao verificar token:\", err);\n      setTokenT(false); // Adiciona setTokenT(false) em caso de erro.\n    }\n  }\n  const setListaIdContext = id => {\n    setListaId(id);\n    localStorage.setItem('@listaId', JSON.stringify(id));\n  };\n  async function loginEntrada(email, password) {\n    try {\n      const resposta = await apiLocal.post('/LoginUsuarios', {\n        email,\n        password\n      });\n      localStorage.setItem('@id', JSON.stringify(resposta.data.id));\n      localStorage.setItem('@token', JSON.stringify(resposta.data.token));\n      localStorage.setItem('@nome', JSON.stringify(resposta.data.nome));\n      localStorage.setItem('@listaId', JSON.stringify(resposta.data.listaId));\n      setTokenT(true);\n      setUsuarioId(resposta.data.id);\n      setListaId(resposta.data.listaId);\n    } catch (err) {\n      toast.error('Erro de Comunicação');\n      setTokenT(false);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(AutenticadoContexto.Provider, {\n    value: {\n      autenticado,\n      loginEntrada,\n      verificarToken,\n      token,\n      usuarioId,\n      listaId,\n      setListaIdContext\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"MxLzTWinwXa34gwXfg3j5LoNobA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","apiLocal","toast","jsxDEV","_jsxDEV","AutenticadoContexto","AuthProvider","children","_s","tokenT","setTokenT","localStorage","getItem","token","setToken","JSON","parse","usuarioId","setUsuarioId","listaId","setListaId","setItem","stringify","removeItem","autenticado","verificarToken","iToken","tokenU","resposta","get","headers","Authorization","data","id","listaIdLocal","nome","err","console","error","setListaIdContext","loginEntrada","email","password","post","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Danrley/Documents/ViniVeta/UC7-main/frontend/src/Contexts/authContexts.js"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\r\nimport apiLocal from '../services/api';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const AutenticadoContexto = createContext();\r\n\r\nexport default function AuthProvider({ children }) {\r\n    // Inicializa o estado com os valores do localStorage (se existirem)\r\n    const [tokenT, setTokenT] = useState(() => localStorage.getItem('@token') ? true : false);\r\n    const [token, setToken] = useState(() => localStorage.getItem('@token') ? JSON.parse(localStorage.getItem('@token')) : '');\r\n    const [usuarioId, setUsuarioId] = useState(() => localStorage.getItem('@id') ? JSON.parse(localStorage.getItem('@id')) : null);\r\n    const [listaId, setListaId] = useState(() => localStorage.getItem('@listaId') ? JSON.parse(localStorage.getItem('@listaId')) : null);\r\n\r\n    // Efeito para persistir o estado no localStorage\r\n    useEffect(() => {\r\n        if (token) {\r\n            localStorage.setItem('@token', JSON.stringify(token));\r\n        } else {\r\n            localStorage.removeItem('@token');\r\n        }\r\n\r\n        if (usuarioId) {\r\n            localStorage.setItem('@id', JSON.stringify(usuarioId));\r\n        } else {\r\n            localStorage.removeItem('@id');\r\n        }\r\n\r\n        if (listaId) {\r\n            localStorage.setItem('@listaId', JSON.stringify(listaId));\r\n        } else {\r\n            localStorage.removeItem('@listaId');\r\n        }\r\n\r\n    }, [token, usuarioId, listaId]);\r\n\r\n    const autenticado = !!tokenT;\r\n\r\n    async function verificarToken() {\r\n        const iToken = localStorage.getItem('@token');\r\n        if (!iToken) {\r\n            setTokenT(false);\r\n            return;\r\n        }\r\n        const tokenU = JSON.parse(iToken);\r\n        setToken(tokenU);\r\n        try {\r\n            const resposta = await apiLocal.get('/VerificaToken', {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            });\r\n            if (resposta.data.id) {\r\n                const listaIdLocal = localStorage.getItem('@listaId');\r\n                if (listaIdLocal) {\r\n                    setListaId(JSON.parse(listaIdLocal));\r\n                }\r\n                setTokenT(true);\r\n                setUsuarioId(resposta.data.id);\r\n                localStorage.setItem('@id', JSON.stringify(resposta.data.id));\r\n                localStorage.setItem('@nome', JSON.stringify(resposta.data.nome));\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Erro ao verificar token:\", err);\r\n            setTokenT(false); // Adiciona setTokenT(false) em caso de erro.\r\n        }\r\n    }\r\n\r\n    const setListaIdContext = (id) => {\r\n        setListaId(id);\r\n        localStorage.setItem('@listaId', JSON.stringify(id));\r\n    };\r\n\r\n    async function loginEntrada(email, password) {\r\n        try {\r\n            const resposta = await apiLocal.post('/LoginUsuarios', {\r\n                email,\r\n                password\r\n            });\r\n            localStorage.setItem('@id', JSON.stringify(resposta.data.id));\r\n            localStorage.setItem('@token', JSON.stringify(resposta.data.token));\r\n            localStorage.setItem('@nome', JSON.stringify(resposta.data.nome));\r\n            localStorage.setItem('@listaId', JSON.stringify(resposta.data.listaId));\r\n            setTokenT(true);\r\n            setUsuarioId(resposta.data.id);\r\n            setListaId(resposta.data.listaId);\r\n        } catch (err) {\r\n            toast.error('Erro de Comunicação');\r\n            setTokenT(false); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <AutenticadoContexto.Provider value={{ autenticado, loginEntrada, verificarToken, token, usuarioId, listaId, setListaIdContext }}>\r\n            {children}\r\n        </AutenticadoContexto.Provider>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}